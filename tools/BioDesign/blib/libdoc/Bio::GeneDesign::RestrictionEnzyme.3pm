.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::GeneDesign::RestrictionEnzyme 3"
.TH Bio::GeneDesign::RestrictionEnzyme 3 "2015-07-31" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::GeneDesign::RestrictionEnzyme
.SH "VERSION"
.IX Header "VERSION"
Version 5.52
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
GeneDesign object that represents a type \s-1II\s0 restriction enzyme
.SH "AUTHOR"
.IX Header "AUTHOR"
Sarah Richardson <SMRichardson@lbl.gov>
.SH "CONSTRUCTOR METHODS"
.IX Header "CONSTRUCTOR METHODS"
.SS "new"
.IX Subsection "new"
You can create a new enzyme or clone an existing enzyme to create a new instance
of an abstract enzyme definition. To do this, provide the \-enzyme flag; the
constructor will ignore every other argument except for \-start.
.PP
Required arguments:
.PP
.Vb 1
\&    EITHER
\&        
\&        \-enzyme : a Bio::GeneDesign::RestrictionEnzyme object to clone
\&    
\&    OR
\&        \-id     : The name of the enzyme (i.e., BamHI)
\&        \-cutseq : The string describing the enzyme\*(Aqs recognition and cleavage
\&                  site
.Ve
.PP
Optional arguments:
.PP
.Vb 10
\&        \-temp     : The incubation temperature for the enzyme
\&        \-tempin   : The heat inactivation temperature for the enzyme
\&        \-score    : A float score, usually the price of the enzyme in dollars
\&        \-methdam  : Sensitivity to dam methylation; can take the values
\&                      b or blocked,
\&                      i or inhibited,
\&                      u or unknown,
\&                    if undefined, will take the value indifferent.
\&        \-methdcm  : Sensitivity to dcm methylation; can take the values
\&                      b or blocked,
\&                      i or inhibited,
\&                      u or unknown,
\&                    if undefined, will take the value indifferent.
\&        \-methcpg  : Sensitivity to cpg methylation; can take the values
\&                      b or blocked,
\&                      i or inhibited,
\&                      u or unknown,
\&                    if undefined, will take the value indifferent.
\&        \-vendors  : a string of single letter codes that represent vendor
\&                    availability \- no spaces.  see vendor() for a list of the
\&                    codes.
\&        \-staract  : Whether or not the enzyme exhibits star activity \- 1 or 0.
\&        \-buffers  : a hash reference; keys are buffer names and values are the
\&                    enzyme activity in that buffer. For example:
\&                    NEB1 => 50, NEB2 => 100, etc.
\&        \-start    : An integer representing an offset; usually used only in
\&                    cloned instances, as opposed to abstract instances.
\&        \-exclude  : An arrayref full of ids for enzymes that should be
\&                    considered mutually exclusive to this enzyme \- see exclude()
.Ve
.SH "FUNCTIONAL METHODS"
.IX Header "FUNCTIONAL METHODS"
.SS "clone"
.IX Subsection "clone"
By default in GeneDesign code, RestrictionEnzyme objects are meant to stand as
abstracts \- that is, they stand for BamHI in general, and not for a particular
instance of a BamHI recognition site. If you want to use the objects in the
latter sense, you will need to clone the abstract object instantiated when the
definition file is read in, thus generating an arbitrary number of BamHI
instances that can then be differentiated by their start attributes.
.SS "positions"
.IX Subsection "positions"
Generates a hash describing the positions of the enzyme's recognition
sites in a nucleotide sequence. Keys are offset in nucleotides, and values are
the recognition site found at said offset as a string.
.SS "overhang"
.IX Subsection "overhang"
Given a nucleotide sequence context, what overhang does this enzyme leave, and
how far away from the cutsite is it?
.PP
Arguments:
.SS "display"
.IX Subsection "display"
Generates a tab delimited display string that can be used to print enzyme
information out in a tabular format.
.SS "common_buffers"
.IX Subsection "common_buffers"
Returns an array reference listing the buffers, if any, in which two enzymes
both have 100% activity. in boolean mode returns the number of buffers
.SS "acceptable_buffer"
.IX Subsection "acceptable_buffer"
Returns a buffer in which both enzymes will have at least a thresholded amount
of activity.
.SS "units"
.IX Subsection "units"
Returns the number of units needed to cleave some sequence
.SH "FILTERING METHODS"
.IX Header "FILTERING METHODS"
.SS "filter_by_sequence"
.IX Subsection "filter_by_sequence"
.Vb 4
\&  Arguments: an arrayref of string nucleotide sequences (may be ambiguous)
\&             a flag indicating whether or not the sequences in the array are
\&              required (1 means they must NOT match; default 0 means they must
\&              match)
\&  
\&  Returns : 1 if the enzyme passes;
\&            0 if the enzyme fails.
.Ve
.SS "filter_by_score"
.IX Subsection "filter_by_score"
.Vb 1
\&  Arguments : a float
\&
\&  Returns   : 1 if the enzyme\*(Aqs score is less than or equal to the argument,
\&              0 if the enzyme\*(Aqs score is higher.
.Ve
.SS "filter_by_vendor"
.IX Subsection "filter_by_vendor"
.Vb 1
\&  Arguments : an arrayref of vendor abbreviations; see vendor().
\&
\&  Returns   : 1 if the enzyme is supplied by any of the vendors queried,
\&              0 else.
.Ve
.SS "filter_by_buffer_activity"
.IX Subsection "filter_by_buffer_activity"
.Vb 2
\&  Arguments : a hashref of buffer thresholds; the key is the buffer name, the
\&                value is an activity threshold.
\&                
\&  Returns   : 1 if the enzyme meets all the buffer requirements,
\&              0 else.
.Ve
.SS "filter_by_dcm_sensitivity"
.IX Subsection "filter_by_dcm_sensitivity"
.Vb 2
\&  Arguments : an arrayref of sensitivity values; the key is the sensitivity
\&                blocked, inhibited, or indifferent
\&              
\&  Returns   : 1 if the enzyme meets the dcm sensitivity requirements,
\&              0 else.
.Ve
.SS "filter_by_dam_sensitivity"
.IX Subsection "filter_by_dam_sensitivity"
.Vb 2
\&  Arguments : an arrayref of sensitivity values; the key is the sensitivity
\&                blocked, inhibited, or indifferent
\&              
\&  Returns   : 1 if the enzyme meets the dam sensitivity requirements,
\&              0 else.
.Ve
.SS "filter_by_cpg_sensitivity"
.IX Subsection "filter_by_cpg_sensitivity"
.Vb 2
\&  Arguments : an arrayref of sensitivity values; the key is the sensitivity
\&                blocked, inhibited, or indifferent
\&              
\&  Returns   : 1 if the enzyme meets the cpg sensitivity requirements,
\&              0 else.
.Ve
.SS "filter_by_star_activity"
.IX Subsection "filter_by_star_activity"
.Vb 1
\&  Arguments : 1 if star activity required, 0 else
\&            
\&  Returns   : 1 if the enzyme meets the star activity requirements,
\&              0 else.
.Ve
.SS "filter_by_incubation_temperature"
.IX Subsection "filter_by_incubation_temperature"
.Vb 1
\&  Arguments : an arrayref of acceptable integer incubation temperatures
\&          
\&  Returns   : 1 if the enzyme meets the incubation temperature requirements,
\&              0 else.
.Ve
.SS "filter_by_inactivation_temperature"
.IX Subsection "filter_by_inactivation_temperature"
.Vb 1
\&  Arguments : an acceptable integer inactivation temperature maximum
\&          
\&  Returns   : 1 if the enzyme meets the inactivation temperature requirement,
\&              0 else.
.Ve
.SS "filter_by_base_ambiguity"
.IX Subsection "filter_by_base_ambiguity"
.Vb 2
\&  Arguments : "nonNonly" if any non N bases are allowed; "ATCGonly" if only
\&                A, T, C, or G are allowed
\&        
\&  Returns   : 1 if the enzyme meets the ambiguous nucleotide requirement,
\&              0 else.
.Ve
.SS "filter_by_length"
.IX Subsection "filter_by_length"
.Vb 1
\&  Arguments : an arrayref of acceptable recognition site lengths
\&        
\&  Returns   : 1 if the enzyme meets the recognition site length requirements,
\&              0 else.
.Ve
.SS "filter_by_overhang_palindromy"
.IX Subsection "filter_by_overhang_palindromy"
.Vb 4
\&  Arguments : an arrayref of acceptable overhang palindromys, from the list
\&                pal (palindromic),
\&                nonpal (nonpalindromic),
\&                pnon (potentially nonpalindromic)
\&      
\&  Returns   : 1 if the enzyme meets the palindromy requirements,
\&              0 else.
.Ve
.SS "filter_by_stickiness"
.IX Subsection "filter_by_stickiness"
.Vb 5
\&  Arguments : an arrayref of acceptable overhang orientations, from the list
\&                1 (single basepair overhang),
\&                5 (five prime overhang),
\&                3 (three prime overhang),
\&                b (blunt ended)
\&    
\&  Returns   : 1 if the enzyme meets the overhang requirements,
\&              0 else.
.Ve
.SH "ACCESSOR METHODS"
.IX Header "ACCESSOR METHODS"
Methods for setting and accessing enzyme attributes
.SS "id"
.IX Subsection "id"
The name of the enzyme.
.SS "display_name"
.IX Subsection "display_name"
The name of the enzyme.
.SS "score"
.IX Subsection "score"
This attribute initially holds the price in dollars per unit of the enzyme
(2009 \s-1US\s0 Dollars) but can be used to hold any score or cost value.
.SS "aggress"
.IX Subsection "aggress"
Aggressiveness is the number of recognition sites in a template piece of \s-1DNA
\&\s0(usually lambda, but sometimes adeno2, pBR322, pUC19, pXba, etc) over the total
length of that template piece of \s-1DNA.\s0 This number tells the manufacturer how
much enzyme to sell as a \*(L"unit\*(R" \- the amount of enzyme required to fully digest
one microgram of template \s-1DNA\s0 under reaction conditions in an hour.
.SS "len"
.IX Subsection "len"
The length in bases of the recognition sequence (recseq).
.SS "methcpg"
.IX Subsection "methcpg"
The effect of CpG methylation on the enzyme's efficacy.
.SS "methdcm"
.IX Subsection "methdcm"
The effect of Dcm methylation on the enzyme's efficacy.
.SS "methdam"
.IX Subsection "methdam"
The effect of Dam methylation on the enzyme's efficacy.
.SS "buffers"
.IX Subsection "buffers"
A hash reference where the keys are buffer names and the values are the activity
level of the enzyme in that Buffer. Since most of the enzymes in the default
GeneDesign list are \s-1NEB\s0 enzymes, this is usually full of \s-1NEB\s0 buffers.
.SS "vendors"
.IX Subsection "vendors"
A hash reference where the keys are abbreviations for and the values are names
of vendors that stock the enzyme. These are read in from the enzyme file.
.PP
.Vb 10
\&                      B = Invitrogen
\&                      C = Minotech
\&                      E = Stratagene
\&                      F = Thermo Scientific Fermentas
\&                      I = SibEnzyme
\&                      J = Nippon Gene Co.
\&                      K = Takara
\&                      M = Roche Applied Science
\&                      N = New England Biolabs
\&                      O = Toyobo Technologies
\&                      Q = Molecular Biology Resources
\&                      R = Promega
\&                      S = Sigma Aldrich
\&                      U = Bangalore Genei
\&                      V = Vivantis
\&                      X = EURx
\&                      Y = CinnaGen
.Ve
.SS "tempin"
.IX Subsection "tempin"
The temperature in degrees Celsius that deactivates the enzyme.
.SS "timein"
.IX Subsection "timein"
The time required at inactivation temperature to deactivate the enzyme.
.SS "temp"
.IX Subsection "temp"
Incubation temperature for the best enzyme activity, in degrees Celsius.
.SS "recseq"
.IX Subsection "recseq"
This attribute is the \*(L"clean\*(R" description of the enzyme's recognition sequence \-
that is, no information about cleavage site can be gained from this attribute.
This is determined automatically from the cleavage string (cutseq) at
instantiation.
.SS "seq"
.IX Subsection "seq"
Synonym for recseq
.SS "cutseq"
.IX Subsection "cutseq"
This attribute is the string description of the enzyme's recognition sequence.
It includes information about both the recognition and cleavage sites.
See http://rebase.neb.com/rebase/rebrec.html for help interpreting this field.
.SS "regex"
.IX Subsection "regex"
This attribute stores a set of regular expressions as an array reference to
speed the search for recognition sites in sequence. The first entry in the
arrayref is the regular expression representing the forward orientation of
the recognition sequence; the second entry represents the reverse orientation
and is only defined if the recognition site is nonpalindromic.
.PP
This attribute is defined at instantiation.
.SS "class"
.IX Subsection "class"
Class describes the cutting behavior of an enzyme. The classes used by
GeneDesign uses a generalized subset of the classes as described at Rebase \- for
the purposes of enzyme editing, three classes have so far proven to be enough.
See http://rebase.neb.com/cgi\-bin/sublist for the full description of enzyme
classes.
.PP
.Vb 3
\&  IIP : This enzyme has a symmetric target and a symmetric cleavage site; this
\&        usually means that the enzyme cleaves inside its own recognition site.
\&        This is not the same as overhang palindromy!
\&        
\&  IIA : This enzyme has an asymmetric recognition site and usually cleaves
\&        outside of it.
\&        
\&  IIB : This enzyme has one recognition site and two cleavage sites, one on
\&        either side of the recognition site, and thus cuts itself out of
\&        sequence.
.Ve
.SS "classex"
.IX Subsection "classex"
.SS "class_regexes"
.IX Subsection "class_regexes"
Short cut to accessing class regular expressions
.SS "type"
.IX Subsection "type"
Type describes the kind of overhang left by an enzyme. This is probably not a
good use of the word type.
.PP
Type may be 5', for a five prime overhang; 3', for a three prime overhang;
or b for blunt ends.
.SS "onebpoverhang"
.IX Subsection "onebpoverhang"
One basepair overhangs can be harder to ligate than blunt ends. This attribute
returns 1 if an enzyme leaves a 1bp overhang and 0 else.
.SS "exclude"
.IX Subsection "exclude"
Some enzymes share overlapping recognition sites. If you are trying to ensure
the absence or uniqueness of a recognition site, you will want to be sure to
exclude isoschizomers and neoschizomers from consideration elsewhere. The
exclude attribute stores an array reference that lists the ids of neo\- and
isoschizomers \- or any arbitrary enzyme that is incompatible with this enzyme \-
for easy lookup.
.SS "palindromy"
.IX Subsection "palindromy"
Information about the overhang the enzyme leaves.
.PP
.Vb 5
\&  pal     = palindromic
\&  nonpal  = nonpalindromic
\&  pnon    = potentially nonpalindromic, or sometimes palindromic and sometimes
\&            nonpalindromic
\&  unknown = unknown
.Ve
.SS "staract"
.IX Subsection "staract"
1 if the enzyme exhibits star activity, 0 else
.SS "start"
.IX Subsection "start"
The offset in nucleotides of the enzymes recognition site in an \s-1ORF\s0
.SS "outside_cut"
.IX Subsection "outside_cut"
.SS "inside_cut"
.IX Subsection "inside_cut"
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2013, GeneDesign developers
All rights reserved.
.PP
Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:
.PP
* Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
.PP
* Redistributions in binary form must reproduce the above copyright notice, this
list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.
.PP
* The names of Johns Hopkins, the Joint Genome Institute, the Lawrence Berkeley
National Laboratory, the Department of Energy, and the GeneDesign developers may
not be used to endorse or promote products derived from this software without
specific prior written permission.
.PP
\&\s-1THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \*(L"AS IS\*(R" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE DEVELOPERS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES \s0(\s-1INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES\s0; \s-1LOSS OF USE, DATA, OR
PROFITS\s0; \s-1OR BUSINESS INTERRUPTION\s0) \s-1HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \s0(\s-1INCLUDING NEGLIGENCE
OR OTHERWISE\s0) \s-1ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\s0
